// 가스 센서 및 충격 센서 //

#include <SoftwareSerial.h>
#include "MQ7.h"

#define BT_RXD 2
#define BT_TXD 4
SoftwareSerial bluetooth(BT_RXD, BT_TXD);

MQ7 mq7(A0,5.0);

int CO_sensor = A0; // 일산화탄소 핀 번호

int shock_sensor = A1;  // 충격센서 핀 번호
int shock_value = 0;    // 센서에서 입력 받은 충격 

int read_Button = 0; // 버튼 누름 여부 데이터

int waiting = 40;    
float stop_time = 10000;   // 센서를 구동하지 않는 시간

int sound =13; // 부저

void setup(){
  Serial.begin(9600);   // 시리얼 모니터 시작, 속도는 9600
  bluetooth.begin(9600);
  pinMode(CO_sensor,INPUT);
  pinMode(7,INPUT_PULLUP);
  pinMode(sound,OUTPUT);
  pinMode(shock_sensor,INPUT);
}

void loop(){
  shock_value = analogRead(shock_sensor);
  
  read_Button=digitalRead(7); // 버튼 값 읽어오기
  
  delayMicroseconds(waiting);  // 너무 많은 데이터 입력을 피해주기 위해 잠시 멈춰주는 시간. 

  int CO_value = int(mq7.getPPM());  // 일산화탄소 값 받기

  
 Serial.print("Button press :"); 
  if (read_Button == LOW)
  {
    Serial.println("1");
    for(int i= 0; i<3; i++){  
    digitalWrite(sound,HIGH); 
    digitalWrite(sound,LOW);
    }
  }
  else
  {
   Serial.println("0");
   digitalWrite(sound,LOW);
  }

  
// 시리얼 모니터에 값 출력
  Serial.println(shock_value);

  Serial.println(CO_value);
  
   if (read_Button == HIGH)
  {
    bluetooth.print("0");
  }
  else
  {
   bluetooth.print("1");
  }

  bluetooth.print(shock_value/1000);
  bluetooth.print((shock_value%1000)/100);
  bluetooth.print((shock_value%100)/10);
  bluetooth.print(shock_value%10);
 
  bluetooth.print(CO_value/10000);
  bluetooth.print((CO_value%10000)/1000);
  bluetooth.print((CO_value%1000)/100);
  bluetooth.print((CO_value%100)/10);
  bluetooth.print(CO_value%10);

}

// 아두이노에서 학습용 데이터 추출을 위한 코드 //

#import
import serial
import os
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.externals import joblib
import seaborn as sns
sns.set(color_codes=True)
import matplotlib.pyplot as plt
%matplotlib inline

from numpy.random import seed
from tensorflow import set_random_seed
import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)


from keras.layers import Input, Dropout, Dense, LSTM, TimeDistributed, RepeatVector
from keras.models import Model
from keras import regularizers

#randomize seed
seed(10)
set_random_seed(10)

#load sensor data
data_dir = 'C:/Users/S20184277/Desktop/data'
merged_data = pd.DataFrame()

for filename in os.listdir(data_dir):
    dataset = pd.read_csv(os.path.join(data_dir, filename), sep='\t')
    dataset_mean_abs = np.array(dataset.abs().mean())
    dataset_mean_abs = pd.DataFrame(dataset_mean_abs.reshape(1,3))
    dataset_mean_abs.index = [filename]
    merged_data = merged_data.append(dataset_mean_abs)
    
merged_data.columns = ['shock_value', 'CO_value', 'Temperature']

#sample transform
merged_data.index = pd.to_datetime(merged_data.index, format='%Y.%m.%d.%H.%M.%S')
merged_data = merged_data.sort_index()
merged_data.to_csv('Averaged_SensorTest_Dataset.csv')
print("Dataset shape:", merged_data.shape)
merged_data.head()

#define sample data
train = merged_data['YYYY-mm-dd HH:MM:SS(start)': 'YYYY-mm-dd HH:MM:SS(fin)']
test = merged_data['YYYY-mm-dd HH:MM:SS(start)':]
print("Training dataset shape:", train.shape)
print("Test dataset shape:", test.shape)

#show train plt
fig, ax = plt.subplots(figsize=(14, 6), dpi=80)
ax.plot(train['shock_value'], label='shock_value', color='blue', animated = True, linewidth=1)
ax.plot(train['CO_value'], label='CO_value', color='red', animated = True, linewidth=1)
ax.plot(train['Temperature'], label='Temperature', color='green', animated = True, linewidth=1)
plt.legend(loc='lower left')
ax.set_title('Sensor Training Data', fontsize=16)
plt.show()

#transform time data to frequency
train_fft = np.fft.fft(train)
test_fft = np.fft.fft(test)

#show healthy sensor data plt
fig, ax = plt.subplots(figsize=(14, 6), dpi=80)
ax.plot(train_fft[:,0].real, label='shock_value', color='blue', animated = True, linewidth=1)
ax.plot(train_fft[:,1].imag, label='CO_value', color='red', animated = True, linewidth=1)
ax.plot(train_fft[:,2].real, label='Temperature', color='green', animated = True, linewidth=1)
plt.legend(loc='lower left')
ax.set_title('Sensor Training Frequency Data', fontsize=16)
plt.show()

#show degrading sensor signal
fig, ax = plt.subplots(figsize=(14, 6), dpi=80)
ax.plot(test_fft[:,0].real, label='shock_value', color='blue', animated = True, linewidth=1)
ax.plot(test_fft[:,1].imag, label='CO_value', color='red', animated = True, linewidth=1)
ax.plot(test_fft[:,2].real, label='Temperature', color='green', animated = True, linewidth=1)
plt.legend(loc='lower left')
ax.set_title('Sensor Test Frequency Data', fontsize=16)
plt.show()

#normalize
scaler = MinMaxScaler()
X_train = scaler.fit_transform(train)
X_test = scaler.transform(test)
scaler_filename = "scaler_data"
joblib.dump(scaler, scaler_filename)

#reshape input for LSTM
X_train = X_train.reshape(X_train.shape[0], 1, X_train.shape[1])
print("Training data shape:", X_train.shape)
X_test = X_test.reshape(X_test.shape[0], 1, X_test.shape[1])
print("Test data shape:", X_test.shape)

#define autoencoder
def autoencoder_model(X):
    inputs = Input(shape=(X.shape[1], X.shape[2]))
    L1 = LSTM(16, activation='relu', return_sequences=True, 
              kernel_regularizer=regularizers.l2(0.00))(inputs)
    L2 = LSTM(4, activation='relu', return_sequences=False)(L1)
    L3 = RepeatVector(X.shape[1])(L2)
    L4 = LSTM(4, activation='relu', return_sequences=True)(L3)
    L5 = LSTM(16, activation='relu', return_sequences=True)(L4)
    output = TimeDistributed(Dense(X.shape[2]))(L5)    
    model = Model(inputs=inputs, outputs=output)
    return model

#create autoencoder
model = autoencoder_model(X_train)
model.compile(optimizer='adam', loss='mae')
model.summary()

#fit model to data
nb_epochs = 100
batch_size = 10
history = model.fit(X_train, X_train, epochs=nb_epochs, batch_size=batch_size,
                    validation_split=0.05).history

# plot the training losses
fig, ax = plt.subplots(figsize=(14, 6), dpi=80)
ax.plot(history['loss'], 'b', label='Train', linewidth=2)
ax.plot(history['val_loss'], 'r', label='Validation', linewidth=2)
ax.set_title('Model loss', fontsize=16)
ax.set_ylabel('Loss (mae)')
ax.set_xlabel('Epoch')
ax.legend(loc='upper right')
plt.show()

#show loss distribution plt
X_pred = model.predict(X_train)
X_pred = X_pred.reshape(X_pred.shape[0], X_pred.shape[2])
X_pred = pd.DataFrame(X_pred, columns=train.columns)
X_pred.index = train.index

scored = pd.DataFrame(index=train.index)
Xtrain = X_train.reshape(X_train.shape[0], X_train.shape[2])
scored['Loss_mae'] = np.mean(np.abs(X_pred-Xtrain), axis = 1)
plt.figure(figsize=(16,9), dpi=80)
plt.title('Loss Distribution', fontsize=16)
sns.distplot(scored['Loss_mae'], bins = 20, kde= True, color = 'blue');
plt.xlim([0.0,.5])


#calculate loss
X_pred = model.predict(X_test)
X_pred = X_pred.reshape(X_pred.shape[0], X_pred.shape[2])
X_pred = pd.DataFrame(X_pred, columns=test.columns)
X_pred.index = test.index

scored = pd.DataFrame(index=test.index)
Xtest = X_test.reshape(X_test.shape[0], X_test.shape[2])
scored['Loss_mae'] = np.mean(np.abs(X_pred-Xtest), axis = 1)
scored['Threshold'] = 0.275
scored['Anomaly'] = scored['Loss_mae'] > scored['Threshold']
scored.head()


#merge data
X_pred_train = model.predict(X_train)
X_pred_train = X_pred_train.reshape(X_pred_train.shape[0], X_pred_train.shape[2])
X_pred_train = pd.DataFrame(X_pred_train, columns=train.columns)
X_pred_train.index = train.index

scored_train = pd.DataFrame(index=train.index)
scored_train['Loss_mae'] = np.mean(np.abs(X_pred_train-Xtrain), axis = 1)
scored_train['Threshold'] = 0.275
scored_train['Anomaly'] = scored_train['Loss_mae'] > scored_train['Threshold']
scored = pd.concat([scored_train, scored])


#failure time spot
scored.plot(logy=True,  figsize=(16,9), ylim=[1e-2,1e2], color=['blue','red'])

#save model
model.save("Cloud_model.h5")
print("Model saved")


// LSTM을 이용한 이상치 탐지 //

import serial
import csv
import time
import sys
import os

# 포트, 전송속도 설정
PORT = 'COM4'
BaudRate = 9600

ARD= serial.Serial(PORT,BaudRate)
print('serial ' + serial.__version__)

#csv 생성
def printCSV(sensordata):
    #파일명, 인코딩 타입
    f = open(time.strftime('%Y.%m.%d.%H.%M.%S', time.localtime(time.time()))+ '.csv',"w",encoding="utf-8-sig")

    #csv파일 쓰기 함수
    w=csv.writer(f)

    #센서 값에 시간 추가
    dataSet = sensordata.split(" ")

    #저장
    w.writerow(dataSet)



#아두이노 통신
def Decode(A):
    A = A.decode()
    A = str(A)
    return A
    
def Ardread():
        if ARD.readable():
            LINE = ARD.readline()
            code=Decode(LINE) 
            printCSV(code)
            return code
        else : 
            print("읽기 실패 from _Ardread_")
            sys.exit()



while (True):
    Ardread()


// 최종 코드 // 

#include <SoftwareSerial.h>
#include "MQ7.h"

#define BT_RXD 2
#define BT_TXD 4
SoftwareSerial bluetooth(BT_RXD, BT_TXD);

MQ7 mq7(A0,5.0);

int CO_sensor = A0; // 일산화탄소 핀 번호

int shock_sensor = A1;  // 충격센서 핀 번호
int shock_value = 0;    // 센서에서 입력 받은 충격 

int read_Button = 0; // 버튼 누름 여부 데이터

int waiting = 40;    
float stop_time = 10000;   // 센서를 구동하지 않는 시간

int sound =13; // 부저

void setup(){
  Serial.begin(9600);   // 시리얼 모니터 시작, 속도는 9600
  bluetooth.begin(9600);
  pinMode(CO_sensor,INPUT);
  pinMode(7,INPUT_PULLUP);
  pinMode(sound,OUTPUT);
  pinMode(shock_sensor,INPUT);

}

void loop(){
  shock_value = analogRead(shock_sensor);
  
  read_Button=digitalRead(7); // 버튼 값 읽어오기
  
  delayMicroseconds(waiting);  // 너무 많은 데이터 입력을 피해주기 위해 잠시 멈춰주는 시간. 

  int CO_value = int(mq7.getPPM());  // 일산화탄소 값 받기

  
 Serial.print("Button press :"); 
  if (read_Button == LOW)
  {
    Serial.println("1");
    for(int i= 0; i<3; i++){  
    digitalWrite(sound,HIGH); 
    digitalWrite(sound,LOW);

    }
  }
  else
  {
   Serial.println("0");
   digitalWrite(sound,LOW);
  }

  
// 시리얼 모니터에 값 출력
  Serial.println(shock_value);

  Serial.println(CO_value);
  
   if (read_Button == HIGH)
  {
    bluetooth.print("0");
  }
  else
  {
   bluetooth.print("1");
  }

  bluetooth.print(shock_value/1000);
  bluetooth.print((shock_value%1000)/100);
  bluetooth.print((shock_value%100)/10);
  bluetooth.print(shock_value%10);
 
  bluetooth.print(CO_value/10000);
  bluetooth.print((CO_value%10000)/1000);
  bluetooth.print((CO_value%1000)/100);
  bluetooth.print((CO_value%100)/10);
  bluetooth.print(CO_value%10);



}



